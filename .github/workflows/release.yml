name: Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    if: github.event_name == 'workflow_dispatch' || !startsWith(github.event.head_commit.message, '[RELEASE]')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install (root)
        run: npm i

      # -------------------------------
      # Detect changed packages
      # -------------------------------
      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            di:
              - 'packages/di/**'
            types:
              - 'packages/di/**'
              - 'packages/types/**'
            designTokens:
              - 'packages/design-tokens/**'
            stylesBase:
              - 'packages/styles-base/**'
              - 'packages/design-tokens/**'
              - 'packages/types/**'
            atomsBase:
              - 'packages/atoms-base/**'
              - 'packages/design-tokens/**'
              - 'packages/di/**'
              - 'packages/types/**'
            moleculesBase:
              - 'packages/molecules-base/**'
              - 'packages/di/**'
              - 'packages/types/**'

      # -------------------------------
      # STEP 1: patch versions
      # -------------------------------
      - name: patch versions
        run: |
          if [ "${{ steps.filter.outputs.di }}" = "true" ]; then
            npm --workspace=packages/di version patch --no-git-tag-version
          fi
          if [ "${{ steps.filter.outputs.types }}" = "true" ]; then
            npm --workspace=packages/types version patch --no-git-tag-version
          fi
          if [ "${{ steps.filter.outputs.designTokens }}" = "true" ]; then
            npm --workspace=packages/design-tokens version patch --no-git-tag-version
          fi
          if [ "${{ steps.filter.outputs.stylesBase }}" = "true" ]; then
            npm --workspace=packages/styles-base version patch --no-git-tag-version
          fi
          if [ "${{ steps.filter.outputs.atomsBase }}" = "true" ]; then
            npm --workspace=packages/atoms-base version patch --no-git-tag-version
          fi
          if [ "${{ steps.filter.outputs.moleculesBase }}" = "true" ]; then
            npm --workspace=packages/molecules-base version patch --no-git-tag-version
          fi

      # -------------------------------
      # STEP 2: update versions in dependencies (no stars)
      # -------------------------------
      - name: update versions in dependencies
        run: |
          echo "TYPES_VERSION=$(node -p "require('./packages/types/package.json').version")" >> $GITHUB_ENV
          echo "DI_VERSION=$(node -p "require('./packages/di/package.json').version")" >> $GITHUB_ENV
          echo "DESIGN_TOKENS_VERSION=$(node -p "require('./packages/design-tokens/package.json').version")" >> $GITHUB_ENV
          echo "STYLES_BASE_VERSION=$(node -p "require('./packages/styles-base/package.json').version")" >> $GITHUB_ENV
          echo "ATOMS_BASE_VERSION=$(node -p "require('./packages/atoms-base/package.json').version")" >> $GITHUB_ENV
          echo "MOLECULES_BASE_VERSION=$(node -p "require('./packages/molecules-base/package.json').version")" >> $GITHUB_ENV

          # types -> di (dev)
          npm pkg set "devDependencies.@atomic-design/di=^$DI_VERSION"                     --workspace=packages/types

          # styles-base -> types, design-tokens
          npm pkg set "dependencies.@atomic-design/types=^$TYPES_VERSION"                  --workspace=packages/styles-base
          npm pkg set "dependencies.@atomic-design/design-tokens=^$DESIGN_TOKENS_VERSION" --workspace=packages/styles-base

          # atoms-base -> di, types, design-tokens
          npm pkg set "dependencies.@atomic-design/di=^$DI_VERSION"                        --workspace=packages/atoms-base
          npm pkg set "dependencies.@atomic-design/types=^$TYPES_VERSION"                  --workspace=packages/atoms-base
          npm pkg set "dependencies.@atomic-design/design-tokens=^$DESIGN_TOKENS_VERSION"  --workspace=packages/atoms-base

          # molecules-base -> di, types, design-tokens (dev)
          npm pkg set "devDependencies.@atomic-design/di=^$DI_VERSION"                     --workspace=packages/molecules-base
          npm pkg set "devDependencies.@atomic-design/types=^$TYPES_VERSION"               --workspace=packages/molecules-base

          # store-react-context -> di, types (dev)
          npm pkg set "devDependencies.@atomic-design/di=^$DI_VERSION"                     --workspace=packages/store-react-context
          npm pkg set "devDependencies.@atomic-design/types=^$TYPES_VERSION"               --workspace=packages/store-react-context

      # -------------------------------
      # STEP 3: build all workspaces in root order
      # -------------------------------
      - name: build all workspaces (ordered)
        run: npm run install_and_build --workspaces --if-present

      # Bump root only if changed
      - name: Bump root version
        if: |
          steps.filter.outputs.types == 'true' ||
          steps.filter.outputs.di == 'true' ||
          steps.filter.outputs.designTokens == 'true' ||
          steps.filter.outputs.stylesBase == 'true' ||
          steps.filter.outputs.atomsBase == 'true' ||
          steps.filter.outputs.moleculesBase == 'true'
        run: npm version patch --no-git-tag-version

      - name: Commit changes
        if: |
          steps.filter.outputs.types == 'true' ||
          steps.filter.outputs.di == 'true' ||
          steps.filter.outputs.designTokens == 'true' ||
          steps.filter.outputs.stylesBase == 'true' ||
          steps.filter.outputs.atomsBase == 'true' ||
          steps.filter.outputs.moleculesBase == 'true'
        run: |
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL || 'actions@github.com' }}"
          git status
          NEW_VERSION=$(node -p "require('./package.json').version")
          git add .
          git commit -m "[RELEASE] ${NEW_VERSION}"
          git push

      # -------------------------------
      # Publish (only changed), in dependency order
      # -------------------------------
      - name: Publish di
        if: steps.filter.outputs.di == 'true'
        run: npm publish --workspace=packages/di --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ATOMIC_NPM_TOKEN }}

      - name: Publish types
        if: steps.filter.outputs.types == 'true'
        run: npm publish --workspace=packages/types --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ATOMIC_NPM_TOKEN }}

      - name: Publish design-tokens
        if: steps.filter.outputs.designTokens == 'true'
        run: npm publish --workspace=packages/design-tokens --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ATOMIC_NPM_TOKEN }}

      - name: Publish styles-base
        if: steps.filter.outputs.stylesBase == 'true'
        run: npm publish --workspace=packages/styles-base --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ATOMIC_NPM_TOKEN }}

      - name: Publish atoms-base
        if: steps.filter.outputs.atomsBase == 'true'
        run: npm publish --workspace=packages/atoms-base --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ATOMIC_NPM_TOKEN }}

      - name: Publish molecules-base
        if: steps.filter.outputs.moleculesBase == 'true'
        run: npm publish --workspace=packages/molecules-base --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ATOMIC_NPM_TOKEN }}
